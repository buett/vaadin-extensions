<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!-- Checkstyle configuration that checks the "ZEPTA" coding conventions -->
<module name="Checker">

    <!-- enable supression -->
    <module name="SuppressionCommentFilter"/>

    <!-- required by SuppressionCommentFilter -->
    <module name="TreeWalker">
        <module name="FileContentsHolder"/>
    </module>

    <!-- configure the "Checker", that it handle files with the UTF-8 charset -->
    <property name="charset" value="UTF-8" />

    <!-- Checks for long src-Files - configure to accept files up to 3500 lines -->
    <module name="FileLength">
        <property name="max" value="3500" />
        <property name="fileExtensions" value="java" />
    </module>

    <!-- Checks that there are no tab characters in the src-code -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <!-- Checks individual java src-Files and defines properties that are applicable -->
    <!-- to checking such files                                                      -->
    <module name="TreeWalker">
        <property name="cacheFile" value="${checkstyle.cache.file}" />

        <!-- Checks for naming conventions -->
        <!-- Checks that constant only contains UpperCase-letters (except log [ logger) -->
        <module name="ConstantName">
            <property name="format" value="((log)|(logger)|([A-Z][A-Z0-9]*(_[A-Z0-9]+)*))$" />
        </module>

        <module name="LocalVariableName">
            <property name="format" value="^_?[a-z][a-zA-Z0-9]*$" />
        </module>

        <module name="MethodName">
            <property name="format" value="[a-z][a-zA-Z0-9]*$" />
        </module>

        <module name="PackageName" />

        <module name="LocalFinalVariableName" />

        <module name="ParameterName" />

        <module name="StaticVariableName">
            <property name="format" value="^_?[a-z][a-zA-Z0-9]*$" />
        </module>

        <module name="TypeName">
            <property name="format" value="[A-Z][a-zA-Z0-9]*$" />
        </module>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.net,java.util,javax.enterprise.inject.spi,javax.enterprise.context,javax.persistence"/>
            <property name="allowStaticMemberImports" value="true"/>
        </module>

        <!-- Checks for imports from a set of illegal packages -->
        <!-- <property name="illegalPkgs" value="java.sql" -->
        <module name="IllegalImport" />

        <!-- Checks for reduntant imports -->
        <module name="RedundantImport" />

        <!-- Checks for unused imports -->
        <module name="UnusedImports" />

        <!-- Checks for long lines -->
        <module name="LineLength">
            <property name="max" value="160" />
            <property name="ignorePattern" value="@version|@see" />
        </module>

        <!-- Checks for long methods and constructors -->
        <!-- countEmpty - whether to count empty lines and single line comments - defaut=false -->
        <module name="MethodLength">
            <property name="max" value="250" />
        </module>

        <!-- Checks the number of parameters of a method | constructor -->
        <module name="ParameterNumber">
            <property name="max" value="5" />
        </module>

        <!-- Checks for braces around code blocks (if, for, while, do) -->
        <module name="NeedBraces" />

        <!-- Checks for block that are used freely in the code -->
        <module name="AvoidNestedBlocks" />

        <!-- Checks for the placement of the left curly braces "{" -->
        <module name="LeftCurly">
            <property name="option" value="EOL" />
        </module>

        <!-- Checks for the placement of the right curly braces "}" -->
        <module name="RightCurly">
            <property name="option" value="same" />
        </module>

        <!-- Checks for emtpy statements -->
        <module name="EmptyStatement" />

        <!-- Checks, that classes that override equals also override hashCode -->
        <module name="EqualsHashCode" />

        <!-- Checks for assignments in subexpressions (ie String s = Integer.toString(i = 2) -->
        <module name="InnerAssignment" />

        <!-- Checks that the "default" is after all "case" in a "switch" -->
        <module name="DefaultComesLast" />

        <!-- Checks that "switch" has a "default" -->
        <module name="MissingSwitchDefault" />

        <!-- Checks for fall through in "switch                                                   -->
        <!-- to supress the warning comment one-linear on the last not empty line before "switch" -->
        <!--    - fallthru      (default)                                                         -->
        <!--    - falls through (default)                                                         -->
        <!--    - fallsthrough  (default)                                                         -->
        <!--    - continue in next case                                                           -->
        <!-- don't forget to comment why you need a fall through -->
        <module name="FallThrough">
            <property name="reliefPattern" value="continue in next case" />
        </module>

        <!-- Checks, that each variable declaration is in its own statement and on its own file -->
        <module name="MultipleVariableDeclarations" />

        <!-- Checks visibility of class members -->
        <!-- Only static final members may be public, other class members must be private or protected -->
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true" />
            <property name="protectedAllowed" value="true" />
            <property name="publicMemberPattern" value="^serialVersionUID$" />
        </module>

        <!--Restricts throws statements to a specified count (default = 1). -->
        <module name="ThrowsCount">
            <property name="max" value="4"/>
        </module>

        <!-- Checks, that "long" constants are defined with an "L" not "l" -->
        <module name="UpperEll" />

        <!-- Checks the style of array type definition in JavaStyle (ie String[] strings) -->
        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true" />
        </module>

        <!-- Checks for empty blocks -->
        <module name="EmptyBlock" />

        <!-- enforce ordering of class members -->
        <module name="DeclarationOrder"/>

        <!--Checks that classes that define a covariant equals() method
        also override method equals(java.lang.Object). Inspired by findbugs -->
        <module name="CovariantEquals"/>

        <!--Detects empty statements (standalone ;). -->
        <module name="EmptyStatement"/>

        <!--Checks that any combination of String literals with optional assignment
        is on the left side of an equals() comparison -->
        <module name="EqualsAvoidNull"/>

        <!--Checks that string literals are not used with == or != -->
        <module name="StringLiteralEquality"/>

        <!--Restricts nested for blocks to a specified depth -->
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>

        <!--Restricts nested if-else blocks to a specified depth -->
        <module name="NestedIfDepth">
            <property name="max" value="2"/>
        </module>

        <!--Restricts nested try blocks to a specified depth -->
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>

        <!--Verifies there are no finalize() methods defined in a class.  -->
        <module name="NoFinalizer"/>

        <!--Checks if any class or object member explicitly initialized to default for its type value
        (null for object references, zero for numeric types and char and false for boolean) -->
        <module name="ExplicitInitialization"/>

        <!--Checks there is only one statement per line. -->
        <module name="OneStatementPerLine"/>

        <module name="BooleanExpressionComplexity">
            <property name="max" value="7"/>
        </module>

        <!-- Checks cyclomatic complexity against a specified limit.
        The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case statements,
        and operators && and || (plus one) in the body of a constructor, method, static initializer, or instance initializer.
        It is a measure of the minimum number of possible paths through the source and therefore the number of required tests.
        Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now! -->
        <module name="CyclomaticComplexity">
            <property name="max" value="5"/>
        </module>

        <!--The NPATH metric computes the number of possible execution paths through a function.
        It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A && B, C || D, etc.).-->
        <module name="NPathComplexity">
            <property name="max" value="150"/>
        </module>

        <module name="JavaNCSS">
            <property name="methodMaximum" value="150"/>
            <property name="classMaximum" value="1500"/>
            <property name="fileMaximum" value="2000"/>
        </module>


        <!-- This metric measures the number of instantiations of other classes within the given class.
        This type of coupling is not caused by inheritance or the object oriented paradigm. Generally speaking,
        any abstract data type with other abstract data types as members has data abstraction coupling; therefore,
        if a class has a local variable that is an instantiation (object) of another class, there is data abstraction coupling.
        The higher the DAC, the more complex the data structure (classes) of the system. -->
        <!--<module name="ClassDataAbstractionCoupling"/>-->

        <!-- System.(out|err).print*, Exception#printStackTrace() -->
        <module name="Regexp">
            <property name="format" value="System\.(out|err)\.print(ln)?"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <module name="Regexp">
            <property name="format" value="\.printStackTrace\(\)"/>
            <property name="illegalPattern" value="true"/>
        </module>
    </module>

</module>